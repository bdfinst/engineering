{"componentChunkName":"component---src-templates-playbook-js","path":"/Continuous Delivery/cloud-checklist/","result":{"data":{"markdownRemark":{"html":"<ul>\n<li><a href=\"#cloud-native-checklist\">Cloud Native checklist</a></li>\n<li>\n<p><a href=\"#principles-and-practices\">Principles and Practices</a></p>\n<ul>\n<li><a href=\"#small-autonomous-highly-cohesive-services\">Small, autonomous, highly-cohesive services</a></li>\n<li><a href=\"#hypermedia-driven-service-interactions\">Hypermedia-driven service interactions</a></li>\n<li><a href=\"#modeled-around-business-concepts\">Modeled around business concepts</a></li>\n<li><a href=\"#hide-internal-implementation-details\">Hide internal implementation details</a></li>\n<li><a href=\"#decentralize-everything\">Decentralize everything</a></li>\n<li><a href=\"#deploy-independently\">Deploy independently</a></li>\n<li><a href=\"#isolate-failure\">Isolate failure</a></li>\n<li><a href=\"#highly-observable\">Highly observable</a></li>\n<li><a href=\"#culture-of-automation\">Culture of automation</a></li>\n<li><a href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"cloud-native-checklist\" style=\"position:relative;\"><a href=\"#cloud-native-checklist\" aria-label=\"cloud native checklist permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cloud Native checklist</h2>\n<table>\n<thead>\n<tr>\n<th>Capability</th>\n<th>Yes / No</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Domain Context diagram current with dependencies shown</td>\n<td></td>\n</tr>\n<tr>\n<td>Exception logging</td>\n<td></td>\n</tr>\n<tr>\n<td>Logs stream or self-purge</td>\n<td></td>\n</tr>\n<tr>\n<td>Dynamically configurable log levels</td>\n<td></td>\n</tr>\n<tr>\n<td>Database connections self-heal</td>\n<td></td>\n</tr>\n<tr>\n<td>Dependency connections self-heal</td>\n<td></td>\n</tr>\n<tr>\n<td>Service auto-restarts on failure</td>\n<td></td>\n</tr>\n<tr>\n<td>Automated resource and performance monitoring</td>\n<td></td>\n</tr>\n<tr>\n<td>Have NFRs &#x26; SLAs defined for each service</td>\n<td></td>\n</tr>\n<tr>\n<td>Automated alerting for SLAs and NFRs</td>\n<td></td>\n</tr>\n<tr>\n<td>No manual install steps</td>\n<td></td>\n</tr>\n<tr>\n<td>Utilize Correlation ID</td>\n<td></td>\n</tr>\n<tr>\n<td>Load balanced</td>\n<td></td>\n</tr>\n<tr>\n<td>Automated smoke tests after each deployment</td>\n<td></td>\n</tr>\n<tr>\n<td>Heartbeat responds in less than 1 minute after startup</td>\n<td></td>\n</tr>\n<tr>\n<td>No start-up ordering required</td>\n<td></td>\n</tr>\n<tr>\n<td>Minimal critical dependencies</td>\n<td></td>\n</tr>\n<tr>\n<td>Graceful degradation for non-critical dependencies</td>\n<td></td>\n</tr>\n<tr>\n<td>Circuit breakers and request throttles in place</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"principles-and-practices\" style=\"position:relative;\"><a href=\"#principles-and-practices\" aria-label=\"principles and practices permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Principles and Practices</h2>\n<p>While practices may change over time, principles are expected to be less volatile.</p>\n<h3 id=\"small-autonomous-highly-cohesive-services\" style=\"position:relative;\"><a href=\"#small-autonomous-highly-cohesive-services\" aria-label=\"small autonomous highly cohesive services permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Small, autonomous, highly-cohesive services</h3>\n<ul>\n<li>Prefer event-driven, asynchronous communications between services.</li>\n<li>Prefer eventual consistency / replication of select data elements over shared data structures.</li>\n<li>Be cautious about creating shared binary dependencies across services.</li>\n<li>Services are able to be checked out and run locally using embedded DBs, and/or mocked endpoint dependencies as necessary.</li>\n</ul>\n<h3 id=\"hypermedia-driven-service-interactions\" style=\"position:relative;\"><a href=\"#hypermedia-driven-service-interactions\" aria-label=\"hypermedia driven service interactions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hypermedia-driven service interactions</h3>\n<ul>\n<li>Model resources on the domain.</li>\n<li>Use embedded links to drive resource state transitions.</li>\n<li><a href=\"http://restcookbook.com/Basics/hateoas/\">HATEOAS Reference</a></li>\n</ul>\n<h3 id=\"modeled-around-business-concepts\" style=\"position:relative;\"><a href=\"#modeled-around-business-concepts\" aria-label=\"modeled around business concepts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Modeled around business concepts</h3>\n<ul>\n<li>Produce a system context diagram to understand your system boundaries. Consider following c4 architecture diagramming techniques.</li>\n<li>Follow Domain Driven Design practices to understand your domain early in development, and model your domain in your code.</li>\n<li>Use bounded contexts to isolate service boundaries and converse with canonical-model-based systems.</li>\n</ul>\n<h3 id=\"hide-internal-implementation-details\" style=\"position:relative;\"><a href=\"#hide-internal-implementation-details\" aria-label=\"hide internal implementation details permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hide internal implementation details</h3>\n<ul>\n<li>Model bounded contexts</li>\n<li>Use packaging to scope components.</li>\n<li>Services own their data &#x26; hide their databases.</li>\n<li>No database-driven integration.</li>\n<li>Technology-agnostic APIs (ReST).</li>\n</ul>\n<h3 id=\"decentralize-everything\" style=\"position:relative;\"><a href=\"#decentralize-everything\" aria-label=\"decentralize everything permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decentralize everything</h3>\n<ul>\n<li>Self-service whenever possible.</li>\n<li>Teams own their services (but also consider internal open source practices).</li>\n<li>Align teams to the organization.</li>\n<li>Prefer choreography over orchestration.</li>\n<li>Dumb middleware, smart endpoints.</li>\n<li>Deployable to cloud and local (DC/store) environments</li>\n</ul>\n<h3 id=\"deploy-independently\" style=\"position:relative;\"><a href=\"#deploy-independently\" aria-label=\"deploy independently permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deploy independently</h3>\n<ul>\n<li>Coexist versioned endpoints.</li>\n<li>Prefer targeted releases of individual services over habitual mass-installs of several services at once.</li>\n<li>Avoid tightly bound client/server stub generation.</li>\n<li>One service per host.</li>\n<li>Blue/green release testing techniques.</li>\n<li>Consumer-driven upgrade decisions.</li>\n</ul>\n<h3 id=\"isolate-failure\" style=\"position:relative;\"><a href=\"#isolate-failure\" aria-label=\"isolate failure permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Isolate failure</h3>\n<ul>\n<li>Don't treat remote calls like local calls.</li>\n<li>Set timeouts appropriately (consider TCP connect and read timeouts in the 90ish-percentiles)</li>\n<li>Apply bulk-heading &#x26; circuit breaker patterns to limit fallout of failure.</li>\n<li>Understand and design for what should happen during network partitioning (network failures)</li>\n<li>Use redundancy &#x26; load balancing</li>\n</ul>\n<h3 id=\"highly-observable\" style=\"position:relative;\"><a href=\"#highly-observable\" aria-label=\"highly observable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Highly observable</h3>\n<ul>\n<li>Monitored endpoints.</li>\n<li>Use synthetic transactions to simulate real user behavior.</li>\n<li>Aggregate logs and statistics.</li>\n<li>Use correlation IDs to trace calls throughout the system.</li>\n</ul>\n<h3 id=\"culture-of-automation\" style=\"position:relative;\"><a href=\"#culture-of-automation\" aria-label=\"culture of automation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Culture of automation</h3>\n<ul>\n<li>Automated developer driven testing: unit, functional, contract, integration, performance, &#x26; etc.</li>\n<li>Deploy the same way everywhere.</li>\n<li>Implement continuous delivery practices.</li>\n<li><a href=\"https://trunkbaseddevelopment.com/\">Trunk based development</a> over branching by feature/team/release to promote continuous integration practices.</li>\n<li><strong>In the face of a lack of automation/provisioning/monitoring, prefer a properly structured monolith over many segregated smaller services.</strong></li>\n</ul>\n<h3 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h3>\n<ul>\n<li><a href=\"http://shop.oreilly.com/product/0636920033158.do\">Building Microservices</a> by Sam Newman</li>\n<li><a href=\"https://12factor.net\">12 Factor Application</a></li>\n<li><a href=\"assets/Production-Ready_Microservices_excerpt.pdf\">Production Ready Microservices (PDF)</a></li>\n<li><a href=\"https://www.codetinkerer.com/2015/12/04/choosing-an-http-status-code.html\">Choosing an HTTP Status Code</a></li>\n</ul>","frontmatter":{"title":"Cloud Native Checklist","tags":["cd"]}}},"pageContext":{"slug":"/Continuous Delivery/cloud-checklist/"}},"staticQueryHashes":["2613995610","3649515864"]}